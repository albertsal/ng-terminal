{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.module.ts","webpack:///./src/app/example.component.css","webpack:///./src/app/example.component.html","webpack:///./src/app/example.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatInputModule } from '@angular/material/input';\nimport { NgTerminalModule } from 'ng-terminal';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatCardModule } from '@angular/material/card';\nimport { NgxJsonViewerModule } from 'ngx-json-viewer';\nimport { ExampleComponent } from './example.component';\nimport {MatFormFieldModule} from '@angular/material/form-field';\n@NgModule({\n  declarations: [\n    ExampleComponent\n  ],\n  imports: [\n    BrowserModule,\n    NgTerminalModule,\n    MatButtonModule,\n    MatSlideToggleModule,\n    MatInputModule,\n    ReactiveFormsModule,\n    BrowserAnimationsModule,\n    MatCardModule,\n    NgxJsonViewerModule,\n    MatFormFieldModule\n  ],\n  providers: [],\n  bootstrap: [ExampleComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2V4YW1wbGUuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<h2>{{title}}</h2>\\n<ng-terminal [dataSource]=\\\"writeSubject\\\" (keyInput)=\\\"onKeyInput($event)\\\" [displayOption]=\\\"displayOptionBounded\\\">\\n</ng-terminal>\\n<div [class.mat-elevation-z1]=\\\"true\\\" style=\\\"padding-left: 1em; padding-top: 0.3em; margin-top: 0.7em; padding-bottom: 1em\\\">\\n    <div> \\n        <div style=\\\"display:inline-block; vertical-align: top; margin-bottom: 0.8em\\\">\\n            <h3>Display Opiton</h3>\\n            <div>\\n                <mat-slide-toggle class=\\\"example-margin\\\" [color]=\\\"color\\\" (change)=\\\"resizableChange($event)\\\"\\n                    [disabled]=\\\"disabled\\\">\\n                    Resizable\\n                </mat-slide-toggle>\\n            </div>\\n            <div>\\n                <mat-slide-toggle class=\\\"example-margin\\\" [checked]=\\\"fixed\\\" [color]=\\\"color\\\"\\n                    (change)=\\\"fixedChange($event)\\\" [disabled]=\\\"disabled\\\">\\n                    Fixed row and col\\n                </mat-slide-toggle>\\n            </div>\\n            <div>\\n                <mat-form-field>\\n                    <input matInput placeholder=\\\"rows\\\" [formControl]=\\\"rowsControl\\\" type=\\\"number\\\">\\n                </mat-form-field>\\n                <mat-form-field>\\n                    <input matInput placeholder=\\\"cols\\\" [formControl]=\\\"colsControl\\\" type=\\\"number\\\">\\n                </mat-form-field>\\n            </div>\\n        </div>\\n        <div style=\\\"display:inline-block; vertical-align: top\\\">\\n            <h4>JSON</h4>\\n            <ngx-json-viewer [json]=\\\"displayOptionForLiveUpdate\\\"></ngx-json-viewer>\\n        </div>\\n    </div>\\n    <h3>Examples of data binding</h3>\\n    <div>\\n        <span style=\\\"font-size: 0.8em; font-weight: bold\\\">[dataSource]</span>\\n        <div>\\n            <mat-form-field>\\n                <input matInput placeholder=\\\"Type here\\\" value=\\\"\\\" [formControl]=\\\"inputControl\\\">\\n            </mat-form-field>\\n            <button mat-raised-button color=\\\"primary\\\" (click)=\\\"write()\\\">Write</button>\\n        </div>\\n    </div>\\n    <div>\\n        <span style=\\\"font-size: 0.8em; font-weight: bold\\\">(keyInput): {{keyInput}}</span>\\n    </div>\\n</div>\"","import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';\nimport { NgTerminalComponent } from 'ng-terminal';\nimport { Subject } from 'rxjs';\nimport { NgTerminal } from 'ng-terminal/lib/ng-terminal';\nimport { FormControl } from '@angular/forms';\nimport { DisplayOption } from 'ng-terminal/lib/display-option';\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './example.component.html',\n  styleUrls: ['./example.component.css']\n})\nexport class ExampleComponent implements OnInit, AfterViewInit{\n  title = 'NgTerminal Live Example';\n  color = 'accent';\n\n  public resizable: boolean;\n  public fixed = true;\n\n  disabled = false;\n  rowsControl = new FormControl();\n  colsControl = new FormControl();\n  inputControl = new FormControl();\n\n  displayOption: DisplayOption = {};\n  displayOptionBounded: DisplayOption = {};//now it's not used\n  \n  @ViewChild(NgTerminalComponent) child: NgTerminal;\n  \n  constructor(){ }\n\n  ngOnInit(){\n    this.rowsControl.setValue(10);\n    this.colsControl.setValue(40);\n  }\n\n  ngAfterViewInit(){\n    this.invalidate();\n    this.child.keyInput.subscribe((input) => {\n      this.child.write(input);\n    })\n    this.rowsControl.valueChanges.subscribe(()=> {this.invalidate()});\n    this.colsControl.valueChanges.subscribe(()=> {this.invalidate()});\n  }\n\n  invalidate(){\n    if(this.resizable)\n      this.displayOption.activateDraggableOnEdge = {minWidth: 100, minHeight: 100};\n    else\n      this.displayOption.activateDraggableOnEdge = undefined;\n    if(this.fixed)\n      this.displayOption.fixedGrid = {rows: this.rowsControl.value, cols: this.colsControl.value};\n    else\n      this.displayOption.fixedGrid = undefined;\n    this.child.setDisplayOption(this.displayOption);\n  }\n  \n  resizableChange(event: MatSlideToggleChange){\n    this.resizable = event.checked;\n    this.invalidate();\n  }\n\n  fixedChange(event: MatSlideToggleChange){\n    this.fixed = event.checked;\n    this.invalidate();\n  }\n\n  writeSubject = new Subject<string>();\n  write(){\n    this.writeSubject.next(this.inputControl.value);\n  }\n\n  keyInput: string;\n  onKeyInput(event: string){\n    this.keyInput = event;\n  }\n\n  get displayOptionForLiveUpdate(){\n    return JSON.parse(JSON.stringify(this.displayOption));\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}